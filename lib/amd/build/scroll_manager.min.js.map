{"version":3,"file":"scroll_manager.min.js","sources":["../src/scroll_manager.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Scroll manager is a class that help with saving the scroll positing when you\n * click on an action icon, and then when the page is reloaded after processing\n * the action, it scrolls you to exactly where you were. This is much nicer for\n * the user.\n *\n * To use this in your code, you need to ensure that:\n * 1. The button that triggers the action has to have a click event handler that\n *    calls saveScrollPos()\n * 2. After doing the processing, the redirect() function will add 'mdlscrollto'\n *    parameter into the redirect url automatically.\n * 3. Finally, on the page that is reloaded (which should be the same as the one\n *    the user started on) you need to call scrollToSavedPosition()\n *    on page load.\n *\n * @module     core/scroll_manager\n * @copyright  2021 The Open University\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {exception as displayException} from 'core/notification';\n\n/** @property {HTMLElement} scrollingElement the current scrolling element. */\nlet scrollingElement = null;\n\n/**\n * Find scroll position for a given subject id (a data set id) by searching one or two list of elements.\n *\n * @param {String} scrollSubjectId Subject we want to scroll to (represented by a dataset id)\n * @param {String} fallbackScrollSubjectId In case no subject found for scrollSubjectId, we can search another list of elements\n * @param {String} className Class name attribute present on several elements.\n * @param {String} fallbackClassName Class name to look for if first one returns nothing.\n *\n * @returns {String} y position for given subject id.\n */\nconst findScrollPosition = (scrollSubjectId, fallbackScrollSubjectId, className, fallbackClassName) => {\n    const collection = document.getElementsByClassName(className);\n    const matching = new Array();\n    collection.forEach((element) => {\n        if (element.dataset.id == scrollSubjectId) {\n            matching.push(element.getBoundingClientRect().y);\n        }\n    });\n\n    // If first class name returns no match, tries to find fallback.\n    if (matching.length === 0 && fallbackClassName !== undefined) {\n        const fallbackCollection = document.getElementsByClassName(fallbackClassName);\n        fallbackCollection.forEach((element) => {\n            // Only add element to array if visible.\n            if (element.dataset.id == fallbackScrollSubjectId) {\n                matching.push(element.getBoundingClientRect().y);\n            }\n        });\n    }\n    return matching[0];\n};\n\n/**\n * Gets scrolled subject / course index highlight.\n *\n * @param {String} scrollSubjectId Edit switch element\n * @param {String} selector Selector element to be passed to query selection, in addition to exisiting subject id as a dataid.\n */\nconst getIndexHighlight = async(scrollSubjectId, selector) => {\n    const selection = selector + '[data-id=\"' + scrollSubjectId + '\"]';\n    while (document.querySelector(selection) === null) {\n        await new Promise(resolve => requestAnimationFrame(resolve));\n    }\n    return document.querySelector(selection);\n};\n\n/**\n * Get the scrolling element.\n *\n * @returns {HTMLElement}\n */\nconst getScrollingElement = () => {\n    if (scrollingElement === null) {\n        const page = document.getElementById('page');\n        if (isScrollable(page)) {\n            scrollingElement = page;\n        } else {\n            scrollingElement = document.scrollingElement;\n        }\n    }\n\n    return scrollingElement;\n};\n\n/**\n * Get the scroll position for this form.\n *\n * @param {HTMLFormElement} form\n * @returns {HTMLInputElement}\n */\nconst getScrollPositionElement = (form) => {\n    const element = form.querySelector('input[name=mdlscrollto]');\n    if (element) {\n        return element;\n    }\n\n    const scrollPos = document.createElement('input');\n    scrollPos.type = 'hidden';\n    scrollPos.name = 'mdlscrollto';\n    form.appendChild(scrollPos);\n\n    return scrollPos;\n};\n\n/**\n * Is the element scrollable?\n *\n * @param {HTMLElement} element Element.\n * @returns {boolean}\n */\nconst isScrollable = (element) => {\n    // Check if the element has scrollable content.\n    const hasScrollableContent = element.scrollHeight > element.clientHeight;\n\n    // If 'overflow-y' is set to hidden, the scroll bar is't show.\n    const elementOverflow = window.getComputedStyle(element).overflowY;\n    const isOverflowHidden = elementOverflow.indexOf('hidden') !== -1;\n\n    return hasScrollableContent && !isOverflowHidden;\n};\n\n/**\n * Sets scrolled subject / course index highlight.\n *\n * @param {Element} element element to add hightlight to.\n */\nconst setIndexHighlight = (element) => {\n    element.classList.add('pageitem');\n    element.scrollIntoView(true);\n};\n\n/**\n * Get current scroll position.\n *\n * @returns {Number} Scroll position.\n */\nexport const getScrollPos = () => {\n    const scrollingElement = getScrollingElement();\n\n    return scrollingElement.scrollTop;\n};\n\n/**\n * Init event handlers for all links with data-save-scroll=true.\n * Handle to add mdlscrollto parameter to link using js when we click on the link.\n *\n */\nexport const initLinksScrollPos = () => {\n    document.addEventListener('click', (e) => {\n        const link = e.target.closest('a[data-save-scroll=true]');\n        if (!link) {\n            return;\n        }\n\n        e.preventDefault();\n        setPageUrlParam(e.target.href, 'mdlscrollto', getScrollPos(), true);\n    });\n};\n\n/**\n * In the form that contains the element, set the value of the form field with\n * name mdlscrollto to the current scroll position. If there is no element with\n * that name, it creates a hidden form field with that name within the form.\n *\n * @param {string} elementId The element in the form.\n */\nexport const saveScrollPos = (elementId) => {\n    const element = document.getElementById(elementId);\n    const form = element.closest('form');\n    if (!form) {\n        return;\n    }\n\n    saveScrollPositionToForm(form);\n};\n\n/**\n * Save the position to form.\n *\n * @param {Object} form The form is saved scroll position.\n */\nexport const saveScrollPositionToForm = (form) => {\n    getScrollPositionElement(form).value = getScrollPos();\n};\n\n/**\n * Saves scroll subject dataset id.\n *\n * @param {String} url Url to modify.\n * @param {String} className Class name attribute present on several elements.\n * @param {String} fallbackClassName Class name to look for if first one returns nothing.\n * @param {Bool} set Boolean to set url as new url in current window.\n * @return {*} Url with appended parameters if subject found.\n */\nexport const saveScrollSubject = (url, className, fallbackClassName, set) => {\n    // Getting li element so we can check for bottom element visibility.\n    const collection = document.getElementsByClassName(className);\n    const positiveCollection = new Array();\n    collection.forEach((element) => {\n        if (element.getBoundingClientRect().bottom >= 0) {\n            positiveCollection.push(element);\n        }\n    });\n    // Adds some validation, ie: if we are in a course view that is a social format.\n    if (positiveCollection.length !== 0) {\n        return setPageUrlParam(url, 'scrollsubjectid', positiveCollection[0].dataset.id, set);\n    }\n    // If we precised a fallback classname, following logic will add it to url.\n    if (positiveCollection.length === 0 && fallbackClassName !== '' && fallbackClassName !== undefined) {\n        const fallbackCollection = document.getElementsByClassName(fallbackClassName);\n        fallbackCollection.forEach((element) => {\n            if (element.getBoundingClientRect().bottom >= 0) {\n                positiveCollection.push(element);\n            }\n        });\n        return setPageUrlParam(url, 'fallbackscrsubjectid', positiveCollection[0].dataset.id, set);\n    }\n    // If no match found return unchanged url.\n    return url;\n};\n\n/**\n * If there is a parameter like mdlscrollto=123 in the URL, scroll to that saved position.\n */\nexport const scrollToSavedPosition = () => {\n    const url = new URL(window.location.href);\n    if (!url.searchParams.has('mdlscrollto')) {\n        return;\n    }\n\n    const scrollPosition = url.searchParams.get('mdlscrollto');\n\n    // Event onDOMReady is the effective one here. I am leaving the immediate call to\n    // window.scrollTo in case it reduces flicker.\n    const scrollingElement = getScrollingElement();\n    scrollingElement.scrollTo(0, scrollPosition);\n    document.addEventListener('DOMContentLoaded', () => {\n        scrollingElement.scrollTo(0, scrollPosition);\n    });\n};\n\n/**\n * If there is a parameter like scrollsubjectid=123, or fallbackscrsubjectid=24 in the URL, scroll to that saved subject or\n * fallback class.\n * In some cases y-position cannot be obtained accurately, an example of this is using the\n * edit mode switch in a course view, collapsed course will not have same y positions for\n * a different subject when not collapsed.\n *\n * @param {String} className Class name attribute present on several elements.\n * @param {String} fallbackClassName Class name to look for if first one returns nothing.\n * @param {String} selectorHighlight Selector to highlight in addition to a data-id element ie: li.courseindex-item for\n * li.courseindex-item[data-id=scrollsubjectid]\n */\nexport const scrollToSavedSubject = (className, fallbackClassName, selectorHighlight) => {\n    const url = new URL(window.location.href);\n    if (!url.searchParams.has('scrollsubjectid') && !url.searchParams.has('fallbackscrsubjectid')) {\n        return;\n    }\n    // Retrieving a data-id;\n    const scrollSubjectId = url.searchParams.get('scrollsubjectid');\n    const fallbackScrSubjectId = url.searchParams.get('fallbackscrsubjectid');\n    const scrollPosition = findScrollPosition(scrollSubjectId, fallbackScrSubjectId, className, fallbackClassName);\n    // Event onDOMReady is the effective one here. I am leaving the immediate call to\n    // window.scrollTo in case it reduces flicker.\n    const scrollingElement = getScrollingElement();\n    scrollingElement.scrollTo(0, scrollPosition);\n    // Specificity of course view, maybe this can be improved to be more general, else it may need to be moved.\n    if (scrollSubjectId !== undefined && selectorHighlight !== undefined) {\n        getIndexHighlight(scrollSubjectId, selectorHighlight).then((element) => {\n            setIndexHighlight(element);\n            return;\n        }).catch(displayException);\n    }\n    // Issue with this call is that it seems not to be firing because registered to late, unsure where to add that call.\n    document.addEventListener('DOMContentLoaded', () => {\n        scrollingElement.scrollTo(0, scrollPosition);\n    });\n};\n\n/**\n * Sets URL parameter in given url and returns url string.\n *\n * @param {String} url Url to modify.\n * @param {String} paramName Parameter name to add.\n * @param {*} paramValue Value for given parameter.\n * @param {Bool} set Boolean to set url as new url in current window.\n * @returns {String} Url with newly added parameters.\n */\nexport const setPageUrlParam = (url, paramName, paramValue, set) => {\n    const parsedUrl = new URL(url);\n    const params = new URLSearchParams(parsedUrl.search);\n    params.set(paramName, paramValue);\n    parsedUrl.search = params.toString();\n    if (set) {\n        window.location = parsedUrl;\n    }\n    return parsedUrl.toString();\n};\n\n/**\n * Init event handlers for all links with data-savescrollposition=true.\n * Set the value to the closest form.\n */\nexport const watchScrollButtonSaves = () => {\n    document.addEventListener('click', (e) => {\n        const button = e.target.closest('[data-savescrollposition=\"true\"]');\n        if (button) {\n            saveScrollPositionToForm(button.form);\n        }\n    });\n};\n"],"names":["scrollingElement","getScrollingElement","page","document","getElementById","isScrollable","element","hasScrollableContent","scrollHeight","clientHeight","isOverflowHidden","window","getComputedStyle","overflowY","indexOf","getScrollPos","scrollTop","addEventListener","e","target","closest","preventDefault","setPageUrlParam","href","elementId","form","saveScrollPositionToForm","querySelector","scrollPos","createElement","type","name","appendChild","getScrollPositionElement","value","url","className","fallbackClassName","set","collection","getElementsByClassName","positiveCollection","Array","forEach","getBoundingClientRect","bottom","push","length","dataset","id","undefined","URL","location","searchParams","has","scrollPosition","get","scrollTo","selectorHighlight","scrollSubjectId","fallbackScrollSubjectId","matching","y","findScrollPosition","async","selector","selection","Promise","resolve","requestAnimationFrame","getIndexHighlight","then","classList","add","scrollIntoView","setIndexHighlight","catch","displayException","paramName","paramValue","parsedUrl","params","URLSearchParams","search","toString","button"],"mappings":"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"}