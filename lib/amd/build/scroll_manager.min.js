define("core/scroll_manager",["exports","core/notification"],(function(_exports,_notification){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.watchScrollButtonSaves=_exports.setPageUrlParam=_exports.scrollToSavedSubject=_exports.scrollToSavedPosition=_exports.saveScrollSubject=_exports.saveScrollPositionToForm=_exports.saveScrollPos=_exports.initLinksScrollPos=_exports.getScrollPos=void 0;
/**
   * Scroll manager is a class that help with saving the scroll positing when you
   * click on an action icon, and then when the page is reloaded after processing
   * the action, it scrolls you to exactly where you were. This is much nicer for
   * the user.
   *
   * To use this in your code, you need to ensure that:
   * 1. The button that triggers the action has to have a click event handler that
   *    calls saveScrollPos()
   * 2. After doing the processing, the redirect() function will add 'mdlscrollto'
   *    parameter into the redirect url automatically.
   * 3. Finally, on the page that is reloaded (which should be the same as the one
   *    the user started on) you need to call scrollToSavedPosition()
   *    on page load.
   *
   * @module     core/scroll_manager
   * @copyright  2021 The Open University
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */
let scrollingElement=null;const getScrollingElement=()=>{if(null===scrollingElement){const page=document.getElementById("page");scrollingElement=isScrollable(page)?page:document.scrollingElement}return scrollingElement},isScrollable=element=>{const hasScrollableContent=element.scrollHeight>element.clientHeight,isOverflowHidden=-1!==window.getComputedStyle(element).overflowY.indexOf("hidden");return hasScrollableContent&&!isOverflowHidden},getScrollPos=()=>getScrollingElement().scrollTop;_exports.getScrollPos=getScrollPos;_exports.initLinksScrollPos=()=>{document.addEventListener("click",(e=>{e.target.closest("a[data-save-scroll=true]")&&(e.preventDefault(),setPageUrlParam(e.target.href,"mdlscrollto",getScrollPos(),!0))}))};_exports.saveScrollPos=elementId=>{const form=document.getElementById(elementId).closest("form");form&&saveScrollPositionToForm(form)};const saveScrollPositionToForm=form=>{(form=>{const element=form.querySelector("input[name=mdlscrollto]");if(element)return element;const scrollPos=document.createElement("input");return scrollPos.type="hidden",scrollPos.name="mdlscrollto",form.appendChild(scrollPos),scrollPos})(form).value=getScrollPos()};_exports.saveScrollPositionToForm=saveScrollPositionToForm;_exports.saveScrollSubject=(url,className,fallbackClassName,set)=>{const collection=document.getElementsByClassName(className),positiveCollection=new Array;if(collection.forEach((element=>{element.getBoundingClientRect().bottom>=0&&positiveCollection.push(element)})),0!==positiveCollection.length)return setPageUrlParam(url,"scrollsubjectid",positiveCollection[0].dataset.id,set);if(0===positiveCollection.length&&""!==fallbackClassName&&void 0!==fallbackClassName){return document.getElementsByClassName(fallbackClassName).forEach((element=>{element.getBoundingClientRect().bottom>=0&&positiveCollection.push(element)})),setPageUrlParam(url,"fallbackscrsubjectid",positiveCollection[0].dataset.id,set)}return url};_exports.scrollToSavedPosition=()=>{const url=new URL(window.location.href);if(!url.searchParams.has("mdlscrollto"))return;const scrollPosition=url.searchParams.get("mdlscrollto"),scrollingElement=getScrollingElement();scrollingElement.scrollTo(0,scrollPosition),document.addEventListener("DOMContentLoaded",(()=>{scrollingElement.scrollTo(0,scrollPosition)}))};_exports.scrollToSavedSubject=(className,fallbackClassName,selectorHighlight)=>{const url=new URL(window.location.href);if(!url.searchParams.has("scrollsubjectid")&&!url.searchParams.has("fallbackscrsubjectid"))return;const scrollSubjectId=url.searchParams.get("scrollsubjectid"),scrollPosition=((scrollSubjectId,fallbackScrollSubjectId,className,fallbackClassName)=>{const collection=document.getElementsByClassName(className),matching=new Array;collection.forEach((element=>{element.dataset.id==scrollSubjectId&&matching.push(element.getBoundingClientRect().y)})),0===matching.length&&void 0!==fallbackClassName&&document.getElementsByClassName(fallbackClassName).forEach((element=>{element.dataset.id==fallbackScrollSubjectId&&matching.push(element.getBoundingClientRect().y)}));return matching[0]})(scrollSubjectId,url.searchParams.get("fallbackscrsubjectid"),className,fallbackClassName),scrollingElement=getScrollingElement();scrollingElement.scrollTo(0,scrollPosition),void 0!==scrollSubjectId&&void 0!==selectorHighlight&&(async(scrollSubjectId,selector)=>{const selection=selector+'[data-id="'+scrollSubjectId+'"]';for(;null===document.querySelector(selection);)await new Promise((resolve=>requestAnimationFrame(resolve)));return document.querySelector(selection)})(scrollSubjectId,selectorHighlight).then((element=>{(element=>{element.classList.add("pageitem"),element.scrollIntoView(!0)})(element)})).catch(_notification.exception),document.addEventListener("DOMContentLoaded",(()=>{scrollingElement.scrollTo(0,scrollPosition)}))};const setPageUrlParam=(url,paramName,paramValue,set)=>{const parsedUrl=new URL(url),params=new URLSearchParams(parsedUrl.search);return params.set(paramName,paramValue),parsedUrl.search=params.toString(),set&&(window.location=parsedUrl),parsedUrl.toString()};_exports.setPageUrlParam=setPageUrlParam;_exports.watchScrollButtonSaves=()=>{document.addEventListener("click",(e=>{const button=e.target.closest('[data-savescrollposition="true"]');button&&saveScrollPositionToForm(button.form)}))}}));

//# sourceMappingURL=scroll_manager.min.js.map