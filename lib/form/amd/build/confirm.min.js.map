{"version":3,"file":"confirm.min.js","sources":["../src/confirm.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Form confirmation module.\n *\n * @module     core_form/confirm\n * @copyright  2022 Matt Porritt <mattp@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Notification from 'core/notification';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport {get_string as getString} from 'core/str';\nimport Templates from 'core/templates';\nimport LoadingIcon from 'core/loadingicon';\n\n/**\n * Module level variables.\n */\nlet modalObj;\nlet submitId;\n\nconst spinner = LoadingIcon.getIcon();\n/**\n * Creates the confirmation modal.\n *\n * @private\n */\nconst createModal = async() => {\n    try {\n        const title = await getString('confirm', 'core_form');\n        // Create the Modal.\n        ModalFactory.create({\n            type: ModalFactory.types.SAVE_CANCEL,\n            title: title,\n            body: spinner,\n            large: true,\n        }).done((modal) => {\n            modalObj = modal;\n            const root = modalObj.getRoot();\n\n            modal.setButtonText('save', getString('confirm'));\n\n            // Submit form on the save event of the modal.\n            root.on(ModalEvents.save, () => {\n                const form = document.getElementById(submitId);\n                form.submit();\n            });\n        });\n    } catch (error) {\n        Notification.exception(error);\n    }\n};\n\n/**\n * Updates the modal with content.\n *\n * @param {Array} confirmNotices The notice information.\n * @private\n */\nconst updateModal = async(confirmNotices) => {\n    const context = {'notices': confirmNotices};\n\n    modalObj.setBody(spinner);\n    modalObj.show();\n\n    // Load the modal body with the relevant confirmation messages.\n    try {\n        const object = await Templates.renderForPromise('core_form/modal_confirm', context);\n        modalObj.setBody(object.html);\n    } catch (error) {\n        Notification.exception(error);\n    }\n};\n\n/**\n * Handle the form submission event and gather the confirmation conditions.\n *\n * @param {event} event The form submission event.\n */\nconst formSubmit = (event) => {\n    if (event.submitter.name === 'cancel') {\n        return;\n    }\n    event.preventDefault();\n    const form = event.target;\n    let confirmNotices = [];\n\n    // Get all form elements that have data confirm attributes.\n    const confirmElements = form.querySelectorAll('[data-confirm]');\n\n    // Build array of confirmation item labels and descriptions.\n    confirmElements.forEach((element) => {\n        if (!isConfirmableElement(element)) {\n            return;\n        }\n\n        const {value, dataset: {confirm: valueToMatch}} = element;\n\n        if (value == valueToMatch) {\n            return;\n        }\n\n        let noticeData = {'label': element.labels[0].textContent.trim(), 'value': value};\n        if (element.dataset.confirmdesc !== undefined) {\n            noticeData.description = element.dataset.confirmdesc;\n        }\n\n        confirmNotices.push(noticeData);\n    });\n\n    if (confirmNotices.length) {\n        // Call the modal to display the fields with confirmation messages.\n        updateModal(confirmNotices);\n        return;\n    }\n\n    // No confirmation messages apply, just submit the form.\n    document.getElementById(submitId).submit();\n};\n\n/**\n * Check element is confirmarble.\n *\n * @param {element} element Element to confirm.\n * @returns {Boolean}\n */\nconst isConfirmableElement = (element) => {\n    if (element.type === 'checkbox' && element.checked != Boolean(Number(element.dataset.confirm))\n        || (typeof element.value !== 'undefined')) {\n            return true;\n        }\n    return false;\n};\n\n/**\n * Initialise method for confirmation display.\n *\n * @param {String} formId The id of the form the confirmation applies to.\n */\nexport const init = (formId) => {\n    submitId = formId;\n\n    // Set up the modal to be used later.\n    createModal();\n\n    // Add submit event listener to the form.\n    const form = document.getElementById(formId);\n    form.addEventListener('submit', formSubmit);\n};\n"],"names":["modalObj","submitId","spinner","getIcon","formSubmit","event","submitter","name","preventDefault","form","target","confirmNotices","querySelectorAll","forEach","element","isConfirmableElement","value","dataset","confirm","valueToMatch","noticeData","labels","textContent","trim","undefined","confirmdesc","description","push","length","async","context","setBody","show","object","Templates","renderForPromise","html","error","exception","updateModal","document","getElementById","submit","type","checked","Boolean","Number","formId","title","create","ModalFactory","types","SAVE_CANCEL","body","large","done","modal","root","getRoot","setButtonText","on","ModalEvents","save","createModal","addEventListener"],"mappings":";;;;;;;SAiCIA,SACAC,wSAEEC,oEAAsBC,UA0DtBC,WAAcC,WACa,WAAzBA,MAAMC,UAAUC,YAGpBF,MAAMG,uBACAC,KAAOJ,MAAMK,WACfC,eAAiB,GAGGF,KAAKG,iBAAiB,kBAG9BC,SAASC,cAChBC,qBAAqBD,sBAIpBE,MAACA,MAAOC,SAAUC,QAASC,eAAiBL,WAE9CE,OAASG,wBAITC,WAAa,OAAUN,QAAQO,OAAO,GAAGC,YAAYC,aAAiBP,YACtCQ,IAAhCV,QAAQG,QAAQQ,cAChBL,WAAWM,YAAcZ,QAAQG,QAAQQ,aAG7Cd,eAAegB,KAAKP,eAGpBT,eAAeiB,OAnDHC,OAAAA,uBACVC,QAAU,SAAYnB,gBAE5BX,SAAS+B,QAAQ7B,SACjBF,SAASgC,iBAICC,aAAeC,mBAAUC,iBAAiB,0BAA2BL,SAC3E9B,SAAS+B,QAAQE,OAAOG,MAC1B,MAAOC,6BACQC,UAAUD,SA0CvBE,CAAY5B,gBAKhB6B,SAASC,eAAexC,UAAUyC,UAShC3B,qBAAwBD,SACL,aAAjBA,QAAQ6B,MAAuB7B,QAAQ8B,SAAWC,QAAQC,OAAOhC,QAAQG,QAAQC,gBACpD,IAAlBJ,QAAQE,oBAWN+B,SACjB9C,SAAW8C,OAjHKlB,qBAENmB,YAAc,mBAAU,UAAW,oCAE5BC,OAAO,CAChBN,KAAMO,uBAAaC,MAAMC,YACzBJ,MAAOA,MACPK,KAAMnD,QACNoD,OAAO,IACRC,MAAMC,QACLxD,SAAWwD,YACLC,KAAOzD,SAAS0D,UAEtBF,MAAMG,cAAc,QAAQ,mBAAU,YAGtCF,KAAKG,GAAGC,sBAAYC,MAAM,KACTtB,SAASC,eAAexC,UAChCyC,eAGf,MAAOL,6BACQC,UAAUD,SA8F3B0B,GAGavB,SAASC,eAAeM,QAChCiB,iBAAiB,SAAU5D"}